# This workflow will do a clean install of node dependencies,
# build the frontend, push files to remote dev and remotely build backend
# as soon as there are pushes to the main branch

name: Build & Deploy (Nightly)

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup Node.js 17
      uses: actions/setup-node@v3
      with:
        node-version: 17.x
    - name: Cache node_modules
      uses: actions/cache@v3
      id: node_modules-cache
      with:
        path: node_modules
        key: ${{ runner.os }}-build-${{ hashFiles('**/package.json') }}-${{ hashFiles('**/package-lock.json') }}
    - name: Install node packages
      if: steps.node_modules-cache.outputs.cache-hit != 'true'
      run: npm ci
    - name: Build frontend
      run: npm run build
    - name: Build .env
      run: printf "${{ secrets.LARAVEL_ENV_DEV }}" >> .env
    - name: Push project files to testing environment
      uses: burnett01/rsync-deployments@5.2
      with:
        switches: -avzr --exclude={'.git*','node_modules','.editorconfig','.env.*','vendor','storage'}
        path: ./
        remote_path: ${{ secrets.DEPLOY_PATH_DEV }}
        remote_host: ${{ secrets.DEPLOY_HOST_DEV }}
        remote_port: ${{ secrets.DEPLOY_PORT_DEV }}
        remote_user: ${{ secrets.DEPLOY_USER_DEV }}
        remote_key: ${{ secrets.DEPLOY_SSH_KEY_DEV }}
        remote_key_pass: ${{ secrets.DEPLOY_SSH_PHRASE_DEV }}
    - name: Build backend
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.DEPLOY_HOST_DEV }}
        port: ${{ secrets.DEPLOY_PORT_DEV }}
        username: ${{ secrets.DEPLOY_USER_DEV }}
        key: ${{ secrets.DEPLOY_SSH_KEY_DEV }}
        passphrase: ${{ secrets.DEPLOY_SSH_PHRASE_DEV }}
        script: |
          cd ${{ secrets.DEPLOY_PATH_DEV }}
          composer update -qn
          composer install -qno --no-ansi --no-scripts --no-progress
          php8.2 artisan migrate --force
          php8.2 artisan config:clear
          php8.2 artisan config:cache
          php8.2 artisan route:clear
          php8.2 artisan route:cache
          php8.2 artisan view:clear
          php8.2 artisan view:cache
          rm -rf node_modules .git* .editorconfig .env.* *.config.js
